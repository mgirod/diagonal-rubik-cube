package DR;

require Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(sets rep6 stable check perm showres
						 rotP rotQ rotR rotS rotT rotU rotV rotW
						 rotp rotq rotr rots rott rotu rotv rotw);

use warnings;
use strict;
use feature qw(switch say);

my $s = {};
my (%res, %done);

sub sets {
	for my $i (0..5) {
		for my $j (0..12) {
			$s->{$i}{$j} = "$i/$j";
		}
	}
}
sub stable {
	my $n = 0;
	for my $i (0..5) {
		for my $j (0..12) {
			$n++ if $s->{$i}{$j} eq "$i/$j";
		}
	}
	return $n;
}
sub check {
	my %h;
	for my $i (0..5) {
		for my $j (0..12) {
			$h{$s->{$i}{$j}}++;
		}
	}
	my $n = scalar keys %h;
	die "Only $n unique values!\n" unless $n == 78;
}
sub rep {
	my ($i, $j) = @_;
	my $a = $s->{$i}{$j};
	return $a eq "$i/$j"? '- ' : $a;
}
sub printF {
	my ($i, $j, $c) = @_;
	given ($j) {
		when(0) { printf " %6s%6s%6s$c",    map {rep($i, $_)} 10, 5, 9  }
		when(1) { printf "    %6s%6s   $c", map {rep($i, $_)}   1, 4    }
		when(2) { printf " %6s%6s%6s$c",    map {rep($i, $_)} 6, 0, 8   }
		when(3) { printf "    %6s%6s   $c", map {rep($i, $_)}   2, 3    }
		when(4) { printf " %6s%6s%6s$c",    map {rep($i, $_)} 11, 7, 12 }
	};
}
sub rep6 {
	for(0..4) { print ' 'x20; printF(1, $_, "\n") }
	for my $i (0..4) {
		printF($_, $i, ' ') for 2, 0;
		printF(4, $i, "\n");
	}
	for my $i (3, 5) {
		for (0..4) { print ' 'x20; printF($i, $_, "\n") }
	}
	say '-'x32;
}
sub tmpcpy {
	my $t = {};
	for my $i (0..5) {
		for my $j (0..12) { $t->{$i}{$j} = $s->{$i}{$j} }
	}
	return $t;
}
sub perm {
	my @seq = @_;
	sets();
	my $k = join '', @seq;
	return if $done{$k}++;
	eval "rot$_" for @seq;
	my $n = stable;
	push @{$res{$n}}, $k;
	# if (interestingly) stable, show the representation
	if ($n == 63) { # 63 is special for dr3
	# if ($n == 65) { # 65 is special for dr3
	# if ($n < 78 and $n > 65) { # 78 means nothing changed
		say "$k: $n";
		rep6;
	}
}
sub showres { #nr of combinations per stability grade
	for my $n (sort{$a <=> $b} keys %res) {
		print "$n: ", scalar @{$res{$n}}, "\n";
	}
}
sub rotP {
	my $t = tmpcpy;
	@{$s->{0}}{0..3,6,7,10..12} = @{$t->{3}}{0,4,1,2,5,6,9..11};
	$s->{1}{11} = $t->{4}{11};
	@{$s->{2}}{0,2..4,7,8,9,11,12} = @{$t->{0}}{0..3,6,7,12,10,11};
  @{$s->{3}}{0,4,1,2,5,6,9..11} = @{$t->{2}}{0,2..4,7,8,11,12,9};
  $s->{4}{11} = $t->{5}{10};
  $s->{5}{10} = $t->{1}{11};
}
sub rotQ {
	my $t = tmpcpy;
	@{$s->{0}}{0,2..4,7..9,11,12} = @{$t->{4}}{0..3,6,7,12,10,11};
	$s->{1}{12} = $t->{5}{9};
	$s->{2}{12} = $t->{1}{12};
  @{$s->{3}}{0,3,4,1,8,5,10,12,9} = @{$t->{0}}{0,2..4,7,8,9,11,12};
  @{$s->{4}}{0,1..3,6,7,10..12} = @{$t->{3}}{0,3,4,1,8,5,12,9,10};
  $s->{5}{9} = $t->{2}{12};
}
sub rotR {
	my $t = tmpcpy;
	@{$s->{0}}{0,3,4,1,8,5,12,9,10} = @{$t->{1}}{0,2..4,7,8,11,12,9};
	@{$s->{1}}{0,2..4,7,8,11,12,9} = @{$t->{4}}{0,4,1,2,5,6,9..11};
	$s->{2}{9} = $t->{5}{12};
	$s->{3}{9} = $t->{2}{9};
  @{$s->{4}}{0,4,1,2,5,6,9..11} = @{$t->{0}}{0,3,4,1,8,5,12,9,10};
  $s->{5}{12} = $t->{3}{9};
}
sub rotS {
	my $t = tmpcpy;
	@{$s->{0}}{0,4,1,2,5,6,9..11} = @{$t->{2}}{0,3,4,1,8,5,12,9,10};
	@{$s->{1}}{0..3,6,7,10..12} = @{$t->{0}}{0,4,1,2,5,6,9..11};
  @{$s->{2}}{0,3,4,1,8,5,12,9,10} = @{$t->{1}}{0..3,6,7,10..12};
	$s->{3}{10} = $t->{5}{11};
	$s->{4}{10} = $t->{3}{10};
  $s->{5}{11} = $t->{4}{10};
}
sub rotT {
	my $t = tmpcpy;
	$s->{0}{10} = $t->{3}{11};
	@{$s->{1}}{0,4,1,2,5,6,9..11} = @{$t->{2}}{0,4,1,2,5,6,9..11};
  @{$s->{2}}{0,4,1,2,5,6,9..11} = @{$t->{5}}{0..3,6,7,10..12};
	$s->{3}{11} = $t->{4}{9};
  $s->{4}{9} = $t->{0}{10};
	@{$s->{5}}{0..3,6,7,10..12} = @{$t->{1}}{0,4,1,2,5,6,9..11};
}
sub rotU {
	my $t = tmpcpy;
	$s->{0}{9} = $t->{2}{10};
	@{$s->{1}}{0,3,4,1,8,5,12,9,10} = @{$t->{5}}{0,2..4,7,8,11,12,9};
	$s->{2}{10} = $t->{3}{12};
  $s->{3}{12} = $t->{0}{9};
  @{$s->{4}}{0,3,4,1,8,5,12,9,10} = @{$t->{1}}{0,3,4,1,8,5,12,9,10};
	@{$s->{5}}{0,2..4,7,8,11,12,9} = @{$t->{4}}{0,3,4,1,8,5,12,9,10};
}
sub rotV {
	my $t = tmpcpy;
	$s->{0}{12} = $t->{1}{9};
	$s->{1}{9} = $t->{2}{11};
  $s->{2}{11} = $t->{0}{12};
	@{$s->{3}}{0,2..4,7,8,11,12,9} = @{$t->{4}}{0,2..4,7,8,11,12,9};
  @{$s->{4}}{0,2..4,7,8,11,12,9} = @{$t->{5}}{0,3,4,1,8,5,12,9,10};
	@{$s->{5}}{0,3,4,1,8,5,12,9,10} = @{$t->{3}}{0,2..4,7,8,11,12,9};
}
sub rotW {
	my $t = tmpcpy;
	$s->{0}{11} = $t->{4}{12};
	$s->{1}{10} = $t->{0}{11};
	@{$s->{2}}{0..3,6,7,10..12} = @{$t->{3}}{0..3,6,7,10..12};
  @{$s->{3}}{0..3,6,7,10..12} = @{$t->{5}}{0,4,1,2,5,6,9..11};
  $s->{4}{12} = $t->{1}{10};
	@{$s->{5}}{0,4,1,2,5,6,9..11} = @{$t->{2}}{0..3,6,7,10..12};
}
sub rotp {
	my $t = tmpcpy;
	@{$s->{0}}{0..3,6,7,10..12} = @{$t->{2}}{0,2..4,7,8,11,12,9};
	$s->{1}{11} = $t->{5}{10};
	@{$s->{2}}{0,2..4,7,8,9,11,12} = @{$t->{3}}{0,4,1,2,5,6,11,9,10};
	@{$s->{3}}{0,4,1,2,5,6,9..11} = @{$t->{0}}{0..3,6,7,10..12};
	$s->{4}{11} = $t->{1}{11};
	$s->{5}{10} = $t->{4}{11};
}
sub rotq {
	my $t = tmpcpy;
	@{$s->{0}}{0,2..4,7,8,9,11,12} = @{$t->{3}}{0,3,4,1,8,5,10,12,9};
	$s->{1}{12} = $t->{2}{12};
	$s->{2}{12} = $t->{5}{9};
	@{$s->{3}}{0,3,4,1,8,5,12,9,10} = @{$t->{4}}{0,1..3,6,7,10..12};
	@{$s->{4}}{0..3,6,7,10..12} = @{$t->{0}}{0,2..4,7,8,11,12,9};
	$s->{5}{9} = $t->{1}{12};
}
sub rotr {
	my $t = tmpcpy;
	@{$s->{0}}{0,3,4,1,8,5,12,9,10} = @{$t->{4}}{0,4,1,2,5,6,9..11};
	@{$s->{1}}{0,2..4,7,8,11,12,9} = @{$t->{0}}{0,3,4,1,8,5,12,9,10};
	$s->{2}{9} = $t->{3}{9};
	$s->{3}{9} = $t->{5}{12};
	@{$s->{4}}{0,4,1,2,5,6,9..11} = @{$t->{1}}{0,2..4,7,8,11,12,9};
	$s->{5}{12} = $t->{2}{9};
}
sub rots {
	my $t = tmpcpy;
	@{$s->{0}}{0,4,1,2,5,6,9..11} = @{$t->{1}}{0..3,6,7,10..12};
	@{$s->{1}}{0..3,6,7,10..12} = @{$t->{2}}{0,3,4,1,8,5,12,9,10};
	@{$s->{2}}{0,3,4,1,8,5,12,9,10} = @{$t->{0}}{0,4,1,2,5,6,9..11};
	$s->{3}{10} = $t->{4}{10};
	$s->{4}{10} = $t->{5}{11};
	$s->{5}{11} = $t->{3}{10};
}
sub rott {
	my $t = tmpcpy;
	$s->{0}{10} = $t->{4}{9};
	@{$s->{1}}{0,4,1,2,5,6,9..11} = @{$t->{5}}{0..3,6,7,10..12};
	@{$s->{2}}{0,4,1,2,5,6,9..11} = @{$t->{1}}{0,4,1,2,5,6,9..11};
	$s->{3}{11} = $t->{0}{10};
	$s->{4}{9} = $t->{3}{11};
	@{$s->{5}}{0..3,6,7,10..12} = @{$t->{2}}{0,4,1,2,5,6,9..11};
}
sub rotu {
	my $t = tmpcpy;
	$s->{0}{9} = $t->{3}{12};
	@{$s->{1}}{0,3,4,1,8,5,12,9,10} = @{$t->{4}}{0,3,4,1,8,5,12,9,10};
	$s->{2}{10} = $t->{0}{9};
	$s->{3}{12} = $t->{2}{10};
	@{$s->{4}}{0,3,4,1,8,5,12,9,10} = @{$t->{5}}{0,2..4,7,8,11,12,9};
	@{$s->{5}}{0,2..4,7,8,11,12,9} = @{$t->{1}}{0,3,4,1,8,5,12,9,10};
}
sub rotv {
	my $t = tmpcpy;
	$s->{0}{12} = $t->{2}{11};
	$s->{1}{9} = $t->{0}{12};
	$s->{2}{11} = $t->{1}{9};
	@{$s->{3}}{0,2..4,7,8,11,12,9} = @{$t->{5}}{0,3,4,1,8,5,12,9,10};
	@{$s->{4}}{0,2..4,7,8,11,12,9} = @{$t->{3}}{0,2..4,7,8,11,12,9};
	@{$s->{5}}{0,3,4,1,8,5,12,9,10} = @{$t->{4}}{0,2..4,7,8,11,12,9};
}
sub rotw {
	my $t = tmpcpy;
	$s->{0}{11} = $t->{1}{10};
	$s->{1}{10} = $t->{4}{12};
	@{$s->{2}}{0..3,6,7,10..12} = @{$t->{5}}{0,4,1,2,5,6,9..11};
	@{$s->{3}}{0..3,6,7,10..12} = @{$t->{2}}{0..3,6,7,10..12};
	$s->{4}{12} = $t->{0}{11};
	@{$s->{5}}{0,4,1,2,5,6,9..11} = @{$t->{3}}{0..3,6,7,10..12};
}
sub run {
	my $cmd = shift @ARGV;
	die "Only valid: PQRSTUVWpqrstuvw\n" unless $cmd =~ /^[p-w]+$/i;
	my @a = split//, $cmd;
	eval "rot$_" while $_ = shift @a;
	say $cmd;
	rep6;
}

1;
